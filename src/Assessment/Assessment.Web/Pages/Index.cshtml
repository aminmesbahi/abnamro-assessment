@page
@model IndexModel
@{
  ViewData["Title"] = "Assessment Task | Mohammad Amin Mesbahi";
}
<div class="row">
  <div class="col-xs-12 col-lg-4 col-xxl-2">
    <form class="row g-3 needs-validation" id="startCalculationForm" novalidate method="post">
      <div class="mb-1">
        <label for="requestValue" class="form-label">Enter a value to calculate:</label>
        <input type="number" class="form-control" id="requestValue" name="requestValue" min="10" max="99" required />
        <div class="invalid-tooltip">Please enter a 2-digit number<br>(10 <= value <=99)</div>
            <div id="requestValueHelpBlock" class="form-text"><span id="requestValueHelpBlockText"
                class="text-muted">The value must be 2-digit number</span></div>
        </div>

        <button id="btnStartCalculation" asp-page-handler="StartCalculation" type="submit" class="btn btn-primary px-4"
          disabled><i class="bi bi-calculator"></i> Start calculate</button>
    </form>



    <div id="liveStatusResult" class="d-none ms-3 text-info fs-6 mt-3 border-top pt-3">

    </div>

  </div>
  <div class="col-sx-12 col-lg-6 col-xxl-3 border-start ms-3">
    <form class="row g-3 d-none ms-3" id="statusInquiryForm" method="post">
      <div class="mb-1">
        <label for="returnedHandler" class="form-label">Your Calculation handler:</label>
        <input type="text" class="form-control" id="returnedHandler" name="returnedHandler" readonly />
        <div id="returnedHandlerHelpBlock" class="form-text"><span id="returnedHandlerHelpBlockText"
            class="text-muted">The GUID returned from StartCalculation() function</span></div>

      </div>

      <button id="btnGetStatus" asp-page-handler="GetStatus" type="submit" class="btn btn-info text-light px-4"><i
          class="bi bi-search"></i> Get current status</button>
    </form>
    <div id="getStatusResult" class="d-none ms-3 text-info fs-6 mt-3 border-top pt-3">

    </div>
  </div>
</div>



<hr class="col-3 col-md-3 my-5">
<div class="row">
  <h1 class="display-4">Assessment Task</h1>
  <div class="col-xl-12 col-xxl-8 text-black-50 fs-6">
    <ol>
      <li>Write a simple C# (Core 3.1, .NET5+) REST web service with two methods:</li>
      <ol type="a">
        <li>GUID StartCalculation(some input values) calculates ‘something’, but takes its time, somewhere between 20
          seconds and 1 minute.</li>
        <li>StatusObject GetStatus(GUID) can be called to get a (JSON) status object back. This object should contain
          the status (i.e. ‘running’, ‘failed’, ‘completed’), progress(10%, 20% etc) and – when completed – the outcome
          of
          the calculation.</li>
      </ol>
      <li>Write a simple C# Web App that consists of a single page where a user can enter some input data for the
        calculation. It also contains a ‘start’ button.
        The web app performs both client and server side validation of the user input (are fields empty, is the value
        numeric). The Start button will only be enabled when the client validation passes.
        When the user clicks the button, the REST web service’s startCalculation is fed with the user input. The
        progress
        of the calculation is visualised (knock yourself out!) and when the calculation is done, the result is
        displayed.
      </li>
      <li>Both client and server app have sufficient unit tests to prove they work.</li>
      <li>Version control of the code is done through GitHub (you can create a free account there).</li>
    </ol>
    <hr />
    <p>Bonus 1: The server and/or client use SQL Server to persist their data</p>
    <p>Bonus 2: The calculation(s) is/are written in stored procedures which are also unit tested</p>
    <p>Bonus 3: The solution is deployed to an Azure App Service (<a href="https://azure.microsoft.com/en-us/free"
        target="_blank">free account available here</a>)</p>
  </div>
</div>
@section scripts{
<script>

  $(function () {
    var conId;
    var calcIcon = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Calculating...';
    var normIcon = '<i class="bi bi-calculator bi-spin"></i> Start Calculate';
    var connection = new signalR.HubConnectionBuilder()
      .withUrl('https://api.assessment.mesbahi.net/calchub')
      .configureLogging(signalR.LogLevel.Trace)
      .build();
    connection.on("ReceiveStatus", (user, status) => {
      $("#btnStartCalculation").attr("disabled", 'disabled');
      var liveContent = `<p>Progress: ${status.progress}% <br> State: ${status.state} <br> Result: ${((status.result == -1) ? 'Not ready yet!' : status.result)} <br> </p>`;
      $("#liveStatusResult").html(liveContent);
      if(status.progress=="100"){
        $("#btnStartCalculation").html(normIcon);
        $("#btnStartCalculation").attr("disabled", 'disabled');
      }
    });
    connection.start().then(function () { connection.invoke("GetConnectionId").then(function (connectionId) { conId = connectionId; console.log(connectionId) }) }).catch(err => console.error(err));


    $('#btnStartCalculation').on('click', function (evt) {
      evt.preventDefault();
      var postData = $('#startCalculationForm').serialize() + '&ConId=' + conId;
      $.post('/?handler=StartCalculation', postData, function () {
        $("#btnStartCalculation").html(calcIcon);
        $("#btnStartCalculation").attr("disabled", 'disabled');
      }).done(function (data) {

        $("#statusInquiryForm").removeClass("d-none");
        $("#returnedHandler").val(data);
        $("#liveStatusResult").removeClass("d-none");
        $("#liveStatusResult").addClass("d-block");
        startTime = performance.now();
      });
    });


    var startTime, endTime;
    $('#btnGetStatus').on('click', function (evt) {
      evt.preventDefault();
      $.post('/?handler=GetStatus', $('#statusInquiryForm').serialize(), function () {
      }).done(function (data) {
        $("#getStatusResult").removeClass("d-none");
        $("#getStatusResult").addClass("d-block");
        let jsonData = JSON.parse(data);
        let inputVal = $("#requestValue").val();
        endTime = performance.now();
        var timeDiff = endTime - startTime; //in ms 
        timeDiff /= 1000;
        var seconds = Math.round(timeDiff);
        $("#getStatusResult").html(`Progress: ${jsonData.progress}% <br> State: ${jsonData.state} <br> Result: ${((jsonData.result == -1) ? 'Not ready yet!' : jsonData.result)} <br> <span class="text-black-50 fs-6"><i class="bi bi-stopwatch"></i> ${((jsonData.result == -1) ? 'Elapsed Time: ' + seconds + ' seconds' : 'Total time: ' + (jsonData.result - inputVal) + ' seconds')}</span>`);
        console.log(jsonData);
      });
    });
  });
</script>
}